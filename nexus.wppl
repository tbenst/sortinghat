var model = function(neurons, prior, observation) {
	var samplePrior = sample(prior)
	var sampleNeurons = map2(function(neuron,d) {
			// console.log(d)
			return _.extend(neuron,
				{distance: ((d < 1) ? 1 : d+gaussian(0,1))})
		},
		neurons, samplePrior)


	var generatedObservation = pureSampleWindow(sampleNeurons)
	var error = MSE(generatedObservation, observation)
	factor(-10*error)
	return _.pluck(sampleNeurons, 'distance')
	// return _.pluck(sampleNeurons, 'distance')
}

var processObservations = function(observations, neurons, prior) {
	console.log(" call to process observations")
	if (_.first(observations) !== undefined) {
		var posterior = Infer({method: 'MCMC', samples: 50},
			function() {
				return model(neurons, prior, observations[0])
			})

		// var posteriorEstimate = sample(post)
		// var posteriorNeurons = map2(function(neuron,p) {
			// 	return _.extend(neuron,{
			// 		distance: p
			// 	})
			// },
			// priorNeurons, posteriorEstimate)
		// var post = map(function(x) {return {distance: x}},posterior)
		processObservations(_.rest(observations), neurons, posterior)
	} else {
		return prior
	}
}

var trueNeurons = map(function(num) {
						return makeNeuron({firingRate: 10, distance: num})
					},
					[1.5, 2, 3.5])

var observations = map(function(x) {return sampleObservation(trueNeurons)},
	_.range(50))

var neurons = map(function(num) {
						return makeNeuron({distance: null})
					},
					_.range(3))

var priorDistribution = function(num) {
	Infer({method: "forward", samples: 1000}, function() {
		return map(function(n) {return uniform({a:1, b:2})},_.range(num))
	})
}

var posteriors = processObservations(observations, neurons,
	priorDistribution(neurons.length))
console.log(posteriors)
// viz.auto(posteriors)

// console.log("candidateDistances", candidateDistances)
// console.log("processObservations",processObservations(observations, priorNeurons, [], 1))

// var post = Infer({method: 'MCMC', samples: 5000, onlyMAP: true},
// 	function() {
// 		return model(3, observations[0])
// 	})

"done"
